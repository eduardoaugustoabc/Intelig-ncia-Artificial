## Preencha seus dados

## NOME: Eduardo Augusto Andrade Bezerra Cavalcanti
## MATRÍCULA: 121110349

import math

def find_start_end_points(map):
    start_point = None
    destination_point = None
    for i in range(len(map)):
        for j in range(len(map[i])):
            if map[i][j] == 2:
                start_point = (i, j)
            elif map[i][j] == 3:
                destination_point = (i, j)
    return start_point, destination_point

# Função para calcular a menor distância entre dois pontos
def manhattan_distance(point1, point2):
    distance = abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])
    return distance

# Função para encontrar o menor caminho utilizando o A*
def find_path(map, start, destination):
    movements = [(0, 1), (-1, 0), (1, 0), (0, -1)]
    priority_queue = [(0, start, [])]
    visited = set()
    while priority_queue:
        cost, current, path = priority_queue.pop(0)

        path = path + [current]
        if current == destination:
            return path

        for movement in movements:
            new_position = (current[0] + movement[0], current[1] + movement[1])
            if (
                0 <= new_position[0] < len(map)
                and 0 <= new_position[1] < len(map[0])
                and map[new_position[0]][new_position[1]] != 1
            ):
                priority = len(path) + manhattan_distance(new_position, destination)
                priority_queue.append((priority, new_position, path))
                priority_queue.sort(key=lambda x: x[0])
                visited.add(new_position)
    return None

# Execute a célula abaixo para verificar o seu código
def results(map):
    start, destination = find_start_end_points(map)
    shortest_path = find_path(map, start, destination)
    if shortest_path:
        return shortest_path
    else:
        return "Unable to find a path to the destination"

map = [
    [0, 0, 0, 1, 0, 1, 1, 1, 0, 0],
    [0, 1, 1, 0, 0, 0, 2, 1, 1, 0],
    [0, 1, 1, 1, 1, 0, 1, 0, 0, 1],
    [1, 1, 0, 1, 0, 0, 0, 0, 1, 1],
    [1, 0, 1, 1, 1, 1, 1, 0, 0, 1],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
    [0, 0, 1, 1, 0, 0, 0, 1, 1, 0],
    [3, 1, 1, 1, 0, 1, 1, 1, 0, 0]
]
print("resultado:", results(map))
print("resultado esperado:", [(1, 6),(1, 5),(2, 5),(3, 5),(3, 6),(3, 7),(4, 7),(5, 7),(5, 6),(6, 6),(7, 6),(8, 6),(8, 5),(8, 4),(7, 4),(7, 3),(7, 2),(7, 1),(8, 1),(8, 0),(9, 0)])

# Código para execução dos testes automáticos --- NÃO ALTERAR ---
def get_results(map):
    start, destination = find_start_end_points(map)
    shortest_path = find_path(map, start, destination)
    if shortest_path:
        return shortest_path
    else:
        return "Unable to find a path to the destination city."
