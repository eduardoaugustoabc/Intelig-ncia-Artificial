# -*- coding: utf-8 -*-
"""121110349.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovjptNzTqEB_KaO01gdY1TyDPqmCk3Nj

**Instruções de Envio**

- Renomeie o seu Jupyter Notebook com o seu número de matrícula. Exemplo: 111111111.ipynb
- Salve o seu código como um arquivo .py indo em Arquivo >> Baixar >> Baixar .py

## Preencha seus dados

- NOME: EDUARDO AUGUSTO ANDRADE BEZERRA CAVALCANTI
- MATRÍCULA: 121110349
"""

import random
import string

def generate_random_string(length):
    return ''.join(random.choice(string.ascii_letters + string.punctuation + ' ') for _ in range(length))

def calculate_fitness(target, test_string):
    fitness = 0
    for i in range(len(target)):
      if target[i] == test_string[i]:
        fitness += 1

    return fitness


def selection(population, fitness_scores, elite_size):
    sorted_population = [x for _, x in sorted(zip(fitness_scores, population), reverse=True)]
    return sorted_population[:elite_size]

def crossover(parent1, parent2):
    crossover_point = random.randint(0, len(parent1) - 1)
    child = parent1[:crossover_point] + parent2[crossover_point:]
    return child

def mutate(individual, mutation_rate):
    mutated_individual = ''
    for char in individual:
        if random.random() < mutation_rate:
            mutated_individual += random.choice(string.ascii_letters + string.punctuation + ' ')
        else:
            mutated_individual += char
    return mutated_individual

def treina_pokemon(target_word,population_size,mutation_rate,elite_size,generations):
# Inicialização da população
  population = []
  for i in range(population_size):
    population.append(generate_random_string(len(target_word)))

  for generation in range(generations):
      fitness_scores = []

      for individual in population:
        fitness_score = calculate_fitness(target_word, individual)
        fitness_scores.append(fitness_score)

      if max(fitness_scores) == len(target_word):
          return("Solução encontrada na geração", generation)
          break

      elite = selection(population, fitness_scores, elite_size)
      mating_pool = random.choices(population, weights=fitness_scores, k=population_size - elite_size)

      children = []
      for i in range(len(mating_pool) // 2):
          parent1 = mating_pool[i]
          parent2 = mating_pool[len(mating_pool) - 1 - i]
          child = crossover(parent1, parent2)
          child = mutate(child, mutation_rate)
          children.append(child)

      population = elite + children

  best_individual = max(population, key=lambda x: calculate_fitness(target_string, x))

  return best_individual

"""## código para teste"""

target_string = "taylor swift e a industria musical"
population_size = 1000
mutation_rate = 0.01
elite_size = 20
generations = 1000

print(treina_pokemon(target_string,population_size ,mutation_rate,elite_size,generations))

"""## Altere os valores dos parametros e observe como o código se comporta (Não vale nota )
- Tente diminuir o tamanho da população por exemplo
- aumente o rate de mutation
- diminua as generations
- mude o target
- teste as variações que desejar para entender o funcionamento do código
"""